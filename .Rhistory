method = "glm",
tuneLength = 5,
trControl = trainControl(method = "cv",
number =2,
verboseIter = TRUE))
model
plot(model)
model
sonar
Sonar
library(datsets)
library(datsets)
install.packages("mlbench")
library(caret)
library(ggplot2)
library(ranger)
library(devtools)
library(modelplotr)
library(mlbench)
?Sonar
str(Sonar)
str(Sonar)
str(sonar)
Sonar
library(caret)
library(ggplot2)
library(ranger)
library(devtools)
library(modelplotr)
library(mlbench)
data("Sonar")
sonar <- data("Sonar")
str(sonar)
sonar <- data(Sonar)
str(sonar)
View(sonar)
library(caret)
library(ggplot2)
library(ranger)
library(devtools)
library(modelplotr)
library(mlbench)
Sonar
sonar <- Sonar
str(sonar)
sonar <- Sonar
rows <- sample(nrow(sonar), nrow(sonar) * .6, replace = FALSE)
train <- sonar[rows,]
test <- sonar[-rows,]
str(sonar)
modelsonar <- train(Class ~ .,
data = train,
method = "glm",
trControl = trainControl(method = "cv",
number = 5, repeats = 5,verboseIter = F))
modelsonar <- train(Class ~ .,
data = train,
method = "glm",
trControl = trainControl(method = "cv",
number = 5,verboseIter = F))
myControl <- trainControl(
method = "cv",
number = 10,
summaryFunction = twoClassSummary,
classProbs = TRUE, # IMPORTANT!
verboseIter = TRUE
)
modelsonar <- train(Class ~ .,
data = train,
method = "glm",
trControl = myControl)
modelsonar
myControl <- trainControl(
method = "cv",
number = 10,
summaryFunction = twoClassSummary,
classProbs = TRUE, # IMPORTANT!
verboseIter = TRUE
)
modelsonar <- train(Class ~ .,
data = sonar,
method = "glm",
trControl = myControl)
modelsonar
myControl <- trainControl(
method = "cv",
number = 10,
summaryFunction = twoClassSummary,
classProbs = TRUE, # IMPORTANT!
verboseIter = TRUE
)
modelsonar <- train(Class ~ .,
data = sonar,
method = "glm",
trControl = myControl)
modelsonar
pred2 <- predict(modelsonar, test)
confusionMatrix(pred2, test$Class)
myControl <- trainControl(
method = "cv",
number = 10,
summaryFunction = twoClassSummary,
classProbs = TRUE, # IMPORTANT!
verboseIter = TRUE
)
modelsonar <- train(Class ~ .,
data = train,
method = "glm",
trControl = myControl)
modelsonar
pred2 <- predict(modelsonar, test)
confusionMatrix(pred2, test$Class)
sonar <- Sonar
rows <- sample(nrow(sonar), nrow(sonar) * .8, replace = FALSE)
train <- sonar[rows,]
test <- sonar[-rows,]
myControl <- trainControl(
method = "cv",
number = 10,
summaryFunction = twoClassSummary,
classProbs = TRUE, # IMPORTANT!
verboseIter = TRUE
)
modelsonar <- train(Class ~ .,
data = train,
method = "glm",
trControl = myControl)
modelsonar
pred2 <- predict(modelsonar, test)
confusionMatrix(pred2, test$Class)
colAUC(p, test[["Class"]], plotROC = TRUE)
myControl <- trainControl(
method = "cv",
number = 10,
summaryFunction = twoClassSummary,
classProbs = TRUE, # IMPORTANT!
verboseIter = TRUE
)
modelsonar <- train(Class ~ .,
data = train,
method = "glm",
trControl = myControl)
modelsonar
colAUC(pred2, test[["Class"]], plotROC = TRUE)
myControl <- trainControl(
method = "cv",
number = 10,
summaryFunction = twoClassSummary,
classProbs = TRUE, # IMPORTANT!
verboseIter = TRUE
)
modelsonar <- train(Class ~ .,
data = train,
method = "glm",
trControl = myControl)
modelsonar
pred2 <- predict(modelsonar, test)
confusionMatrix(pred2, test$Class)
colAUC(pred2, test[["Class"]], plotROC = TRUE)
colAUC(pred2, test$Class, plotROC = TRUE)
colAUC(pred2, test$Class, plotROC = TRUE)
library(caret)
library(ggplot2)
library(ranger)
library(devtools)
library(modelplotr)
library(mlbench)
library(caTools)
colAUC(pred2, test$Class, plotROC = TRUE)
sonar <- Sonar
rows <- sample(nrow(sonar), nrow(sonar) * .8, replace = FALSE)
train <- sonar[rows,]
test <- sonar[-rows,]
pred2 <- predict(modelsonar, test, type = "response")
pred2 <- predict(modelsonar, test, type = "prob")
pred2 <- predict(modelsonar, test, type = "prob")
colAUC(pred2, test$Class, plotROC = TRUE)
pred2 <- predict(modelsonar, test, type = "response")
pred2 <- predict(modelsonar, test, type = "response")
pred2 <- predict(modelsonar, test)
colAUC(pred2, test$Class, plotROC = TRUE)
pred2 <- predict(modelsonar, test, response = "prob")
colAUC(pred2, test$Class, plotROC = TRUE)
pred2 <- predict(modelsonar, test, type = "prob")
modelsonar
sonar <- Sonar
rows <- sample(nrow(sonar), nrow(sonar) * .8, replace = FALSE)
train <- sonar[rows,]
test <- sonar[-rows,]
myControl <- trainControl(
method = "cv",
number = 10,
summaryFunction = twoClassSummary,
classProbs = TRUE, # IMPORTANT!
verboseIter = TRUE
)
modelsonar <- train(Class ~ .,
data = train,
method = "glm",
trControl = myControl)
modelsonar
pred2 <- predict(modelsonar, test, type = "prob")
colAUC(pred2, test$Class, plotROC = TRUE)
confusionMatrix(pred2, test$Class)
confusionMatrix(pred2, test[["Class"]])
table(pred2, test$Class)
sonar <- Sonar
rows <- sample(nrow(sonar), nrow(sonar) * .8, replace = FALSE)
train <- sonar[rows,]
test <- sonar[-rows,]
nrow(Sonar)
Sonar
rows <- sample(nrow(Sonar), nrow(Sonar) * .7, replace = FALSE)
train <- Sonar[rows,]
test <- Sonar[-rows,]
library(caret)
library(ggplot2)
library(ranger)
library(devtools)
library(modelplotr)
library(mlbench)
library(caTools)
df <- Sonar
knitr::opts_chunk$set(echo = TRUE)
rows <- sample(nrow(Sonar), nrow(Sonar) * .7, replace = FALSE)
train <- Sonar[rows,]
test <- Sonar[-rows,]
test
rows <- sample(nrow(Sonar), nrow(Sonar) * .7, replace = FALSE)
train <- Sonar[rows,]
test <- Sonar[-rows,]
Sonar <- data(Sonar)
rows <- sample(nrow(Sonar), nrow(Sonar) * .7, replace = FALSE)
data(Sonar)
summary(Sonar)
df <- data(Sonar)
rows <- sample(nrow(df), nrow(df) * .7, replace = FALSE)
df
df <- Sonar
df <- Sonar
rows <- sample(nrow(df), nrow(df) * .7, replace = FALSE)
train <- df[rows,]
test <- df[-rows,]
class(Sonar)
knitr::opts_chunk$set(echo = TRUE)
library(caret)
library(ggplot2)
library(ranger)
library(devtools)
library(modelplotr)
library(mlbench)
library(caTools)
str(mtcars)
model <- train(mpg ~ .,
data = mtcars,
method = "lm",
trControl = trainControl(
method = "cv", number = 5,
repeats = 5, verboseIter = FALSE
)
)
model
pred <- predict(model, mtcars)
#calculate RMSE
rmse <- pred - mtcars$mpg
sqrt(mean(rmse^2))
df <- Sonar
df <- Sonar
library(caret)
library(ggplot2)
library(ranger)
library(devtools)
library(modelplotr)
library(mlbench)
library(caTools)
df <- Sonar
df <- data(Sonar)
rows <- sample(nrow(df), nrow(df) * .7, replace = FALSE)
Sonar
rows <- sample(nrow(Sonar), nrow(Sonar) * .8, replace = FALSE)
train <- Sonar[rows,]
test <- Sonar[-rows,]
unlink('C:/Users/cshockley/Desktop/caret2_cache', recursive = TRUE)
df <- as.data.frame(data(Sonar))
rows <- sample(nrow(Sonar), nrow(Sonar) * .8, replace = FALSE)
train <- Sonar[rows,]
test <- Sonar[-rows,]
df
df <- data(Sonar)
df
Boston
library(caret)
library(ggplot2)
library(ranger)
library(devtools)
library(modelplotr)
library(mlbench)
library(caTools)
library(MASS)
Boston
# rows <- sample(nrow(Sonar), nrow(Sonar) * .8, replace = FALSE)
# train <- Sonar[rows,]
# test <- Sonar[-rows,]
knitr::opts_chunk$set(echo = TRUE)
library(tfestimators)
install_tensorflow()
library(tfestimators)
install_tensorflow()
library(tfestimators)
install_tensorflow()
library(ggplot2)
mpg
library(caret)
mpg
library(ggplot2)
ggplot(mpg, aes(mpg, class, col = year)) + geom_point()
ggplot(mpg, aes(mpg, class)) + geom_point()
ggplot(mpg, aes(class, cty, col = year)) + geom_point()
ggplot(mpg, aes(class, cty)) + geom_point()
ggplot(mpg, aes(class, cty)) + geom_violin()
ggplot(mpg, aes(class, cty)) + geom_boxplot()
knitr::opts_chunk$set(echo = TRUE)
irs
iris
str(iris)
set.seed(1111)
rows <- sample(nrow(iris), 1:nrow(iris) * .8, replace = F)
train <- iris[rows,]
test <- iris[-rows,]
library(psych)
pairs.panels(training[,-5],
gap = 0,
bg = c("red", "yellow", "blue")[training$species],
pch = 21)
library(psych)
pairs.panels(training[,-5],
gap = 0,
bg = c("red", "yellow", "blue")[training$species],
pch = 21)
pairs.panels(train[,-5],
gap = 0,
bg = c("red", "yellow", "blue")[train$species],
pch = 21)
pairs.panels(train[,-5],
gap = 0,
bg = c("red", "yellow", "blue")[train$Species],
pch = 21)
pairs.panels(train[,-5],
gap = 0,
bg = c("red", "yellow", "blue")[train$Species],
pch = 21)
pairs.panels(train[,-5],
gap = 0,
bg = c("red", "yellow", "blue")[train$Species],
pch = 21)
pairs.panels(train,
gap = 0,
bg = c("red", "yellow", "blue")[train$Species],
pch = 21)
str(train)
rows <- sample(nrow(iris), 1:nrow(iris) * .8, replace = F)
rows
rows <- sample(1:nrow(iris), nrow(iris) * .8, replace = F)
rows
set.seed(1111)
rows <- sample(1:nrow(iris), nrow(iris) * .8, replace = F)
train <- iris[rows,]
test <- iris[-rows,]
pairs.panels(train,
gap = 0,
bg = c("red", "yellow", "blue")[train$Species],
pch = 21)
pairs.panels(train[,-5],
gap = 0,
bg = c("red", "yellow", "blue")[train$Species],
pch = 21)
pc <- prcomp(train[,-5])
pc <- prcomp(train[,-5],
center = TRUE,
scale. = TRUE)
attributes(pc)
pc$center
pc$scale
print(pc)
summary(pc)
pairs.panesls(pc$x,
gap = 0,
bg = c("red", "yellow", "blue")[train$Species])
pairs.panesls(pc$x,
gap = 0,
bg = c("red", "yellow", "blue")[train$Species])
pairs.panels(pc$x,
gap = 0,
bg = c("red", "yellow", "blue")[train$Species])
library(psych)
library(ggbiplot)
g <- ggbiplot(pc,
obs.scale = 1,
var.scale = 1,
groups = train$Species,
ellipse = TRUE,
circle = TRUE,
ellipse.prob = .68)
g <- g + theme(legend.direction = "horizontal",
legend.position = "top")
g
trg <- predict(pc, train)
trg <- predict(pc, train)
trg <- data.frame(trg, training[5])
trg <- predict(pc, train)
trg <- data.frame(trg, train[5])
trg
trg <- predict(pc, train)
trg <- data.frame(trg, train[5])
tst <- predict(pc, test)
tst <- data.frame(tst, test[5])
library(nnet)
trg$Species <- relevel(trg$Species, ref = "setosa")
mymodel <- multinom(Species ~ PC1 + PC2, data = trg)
summary(mymodel)
p <- predict(mymodel, trg)
p <- predict(mymodel, trg)
tab <- table(p, trg$Species)
tab
tab
p1 <- predict(mymodel, tst)
tab1 <- table(p1, tst$Species)
tab1
p <- predict(mymodel, trg)
tab <- table(p, trg$Species)
tab
1-sum(diag(tab1))/sum(tab1)
1-sum(diag(tab))/sum(tab)
knitr::opts_chunk$set(echo = TRUE)
library(psych)
library(ggbiplot)
str(iris)
summary(iris)
set.seed(1111)
rows <- sample(1:nrow(iris), nrow(iris) * .8, replace = F)
train <- iris[rows,]
test <- iris[-rows,]
pairs.panels(train[,-5],
gap = 0,
bg = c("red", "yellow", "blue")[train$Species],
pch = 21)
pc <- prcomp(train[,-5],
center = TRUE,
scale. = TRUE)
attributes(pc)
pc$center
pc$scale
print(pc)
summary(pc)
pairs.panels(pc$x,
gap = 0,
bg = c("red", "yellow", "blue")[train$Species])
g <- ggbiplot(pc,
obs.scale = 1,
var.scale = 1,
groups = train$Species,
ellipse = TRUE,
circle = TRUE,
ellipse.prob = .68)
g <- g + scale_color_discrete(name = "")
g <- g + theme(legend.direction = "horizontal",
legend.position = "top")
g
trg <- predict(pc, train)
trg <- data.frame(trg, train[5])
tst <- predict(pc, test)
tst <- data.frame(tst, test[5])
library(nnet)
trg$Species <- relevel(trg$Species, ref = "setosa")
mymodel <- multinom(Species ~ PC1 + PC2, data = trg)
summary(mymodel)
p <- predict(mymodel, trg)
tab <- table(p, trg$Species)
tab
1-sum(diag(tab))/sum(tab)
p1 <- predict(mymodel, tst)
tab1 <- table(p1, tst$Species)
tab1
1-sum(diag(tab1))/sum(tab1)
set.seed(1111)
rows <- sample(1:nrow(iris), nrow(iris) * .8, replace = F)
train <- iris[rows,]
test <- iris[-rows,]
summary(pc)
print(pc)
pairs.panels(pc$x,
gap = 0,
bg = c("red", "yellow", "blue")[train$Species])
p <- predict(mymodel, trg)
tab <- table(p, trg$Species)
tab
1-sum(diag(tab))/sum(tab)
1-sum(diag(tab))/sum(tab)
p1 <- predict(mymodel, tst)
tab1 <- table(p1, tst$Species)
tab1
1-sum(diag(tab1))/sum(tab1)
setwd("C:/Users/cshockley/Desktop/WEBSITE_BLOG")
library(blogdown)
serve_site()
serve_site()
knitr::opts_chunk$set(echo = TRUE)
library(psych)
library(ggbiplot)
library(nnet)
library(ggbiplot)
diamonds
