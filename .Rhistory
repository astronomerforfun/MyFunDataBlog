trainLabels,
epochs = 40,
batch_size = 32,
validation_split = 0.2)
model %>% evaluate(trainx, trainLabels)
pred <- model %>%
predict_classes(trainx)
table(Predicted = pred, Actual = trainy)
prob <- model %>%
predict_proba(trainx)
options(scipen = 99999)
cbind(prob, Predicted = pred, Actual = trainy)
model %>%
evaluate(testx, testlabels)
pred <- model%>% predict_classes(testx)
table(Predicted = pred, Actual = testy)
for(i in 1:12){
mypic[[i]] <- readImage(pics[i])
}
for(i in 1:12){
mypic[[i]] <- resize(mypic[[i]], 28,28)
}
for(i in 1:12){
mypic[[i]] <- array_reshape(mypic[[i]], c(28,28,3))
}
trainx <- NULL
for(i in 7:11){
trainx<- rbind(trainx, mypic[[i]])
}
testx <- rbind(mypic[[6]], mypic[[12]])
trainy <- c(0,0,0,0,0,1,1,1,1,1)
testy <- c(0,1)
trainLabels <- to_categorical(trainy)
testlabels <- to_categorical(testy)
model <- keras_model_sequential()
model %>%
layer_dense(units = 256, activation = "relu", input_shape = c(2352))%>%
layer_dense(units = 128, activation = "relu")%>%
layer_dense(units = 2, activation = "softmax")
summary(model)
model%>%
compile(loss = "binary_crossentropy",
optimizer = optimizer_rmsprop(),
metrics= c("accuracy"))
history <- model%>%
fit(trainx,
trainLabels,
epochs = 40,
batch_size = 32,
validation_split = 0.2)
trainLabels <- to_categorical(trainy)
history <- model%>%
fit(trainx,
trainLabels,
epochs = 40,
batch_size = 32,
validation_split = 0.2)
mypic <- list()
for(i in 1:12){
mypic[[i]] <- readImage(pics[i])
}
display(mypic[[6]])
summary(mypic[[4]])
for(i in 1:12){
mypic[[i]] <- resize(mypic[[i]], 28,28)
}
for(i in 1:12){
mypic[[i]] <- array_reshape(mypic[[i]], c(28,28,3))
}
trainx <- NULL
for(i in 1:5){
trainx<- rbind(trainx, mypic[[i]])
}
trainx <- NULL
for(i in 7:11){
trainx<- rbind(trainx, mypic[[i]])
}
testx <- rbind(mypic[[6]], mypic[[12]])
trainy <- c(0,0,0,0,0,1,1,1,1,1)
testy <- c(0,1)
trainLabels <- to_categorical(trainy)
testlabels <- to_categorical(testy)
model <- keras_model_sequential()
model %>%
layer_dense(units = 256, activation = "relu", input_shape = c(2352))%>%
layer_dense(units = 128, activation = "relu")%>%
layer_dense(units = 2, activation = "softmax")
summary(model)
model%>%
compile(loss = "binary_crossentropy",
optimizer = optimizer_rmsprop(),
metrics= c("accuracy"))
history <- model%>%
fit(trainx,
trainLabels,
epochs = 40,
batch_size = 32,
validation_split = 0.2)
library(EBImage)
library(keras)
pics <- c("p1.JPEG", "p2.JPEG","p3.JPEG", "p4.JPEG", "p5.JPEG", "p6.JPEG","c1.JPEG", "c2.JPEG", "c3.JPEG", "c4.JPEG", "c5.JPEG", "c6.JPEG")
mypic <- list()
for(i in 1:12){
mypic[[i]] <- readImage(pics[i])
}
for(i in 1:12){
mypic[[i]] <- resize(mypic[[i]], 28,28)
}
for(i in 1:12){
mypic[[i]] <- array_reshape(mypic[[i]], c(28,28,3))
}
trainx <- NULL
for(i in 1:5){
trainx<- rbind(trainx, mypic[[i]])
}
for(i in 7:11){
trainx<- rbind(trainx, mypic[[i]])
}
testx <- rbind(mypic[[6]], mypic[[12]])
trainy <- c(0,0,0,0,0,1,1,1,1,1)
testy <- c(0,1)
trainLabels <- to_categorical(trainy)
testlabels <- to_categorical(testy)
model <- keras_model_sequential()
model %>%
layer_dense(units = 256, activation = "relu", input_shape = c(2352))%>%
layer_dense(units = 128, activation = "relu")%>%
layer_dense(units = 2, activation = "softmax")
summary(model)
model%>%
compile(loss = "binary_crossentropy",
optimizer = optimizer_rmsprop(),
metrics= c("accuracy"))
history <- model%>%
fit(trainx,
trainLabels,
epochs = 40,
batch_size = 32,
validation_split = 0.2)
model %>% evaluate(trainx, trainLabels)
pred <- model %>%
predict_classes(trainx)
table(Predicted = pred, Actual = trainy)
library(EBImage)
library(keras)
pics <- c("p1.JPEG", "p2.JPEG","p3.JPEG", "p4.JPEG", "p5.JPEG", "p6.JPEG","c1.JPEG", "c2.JPEG", "c3.JPEG", "c4.JPEG", "c5.JPEG", "c6.JPEG")
mypic <- list()
for(i in 1:12){
mypic[[i]] <- readImage(pics[i])
}
for(i in 1:12){
mypic[[i]] <- resize(mypic[[i]], 28,28)
}
for(i in 1:12){
mypic[[i]] <- array_reshape(mypic[[i]], c(28,28,3))
}
library(EBImage)
library(keras)
pics <- c("p1.JPEG", "p2.JPEG","p3.JPEG", "p4.JPEG", "p5.JPEG", "p6.JPEG","c1.JPEG", "c2.JPEG", "c3.JPEG", "c4.JPEG", "c5.JPEG", "c6.JPEG")
mypic <- list()
for(i in 1:12){
mypic[[i]] <- readImage(pics[i])
}
#Printing data
print(mypic[[1]])
display(mypic[[6]])
summary(mypic[[4]])
#normalize
for(i in 1:12){
mypic[[i]] <- resize(mypic[[i]], 28,28)
}
#reshape
for(i in 1:12){
mypic[[i]] <- array_reshape(mypic[[i]], c(28,28,3))
}
trainx <- NULL
for(i in 1:5){
trainx<- rbind(trainx, mypic[[i]])
}
for(i in 7:11){
trainx<- rbind(trainx, mypic[[i]])
}
testx <- rbind(mypic[[6]], mypic[[12]])
trainy <- c(0,0,0,0,0,1,1,1,1,1)
testy <- c(0,1)
trainLabels <- to_categorical(trainy)
testlabels <- to_categorical(testy)
trainLabels
model <- keras_model_sequential()
model %>%
layer_dense(units = 256, activation = "relu", input_shape = c(2352))%>%
layer_dense(units = 128, activation = "relu")%>%
layer_dense(units = 2, activation = "softmax")
summary(model)
model%>%
compile(loss = "binary_crossentropy",
optimizer = optimizer_rmsprop(),
metrics= c("accuracy"))
history <- model%>%
fit(trainx,
trainLabels,
epochs = 40,
batch_size = 32,
validation_split = 0.2)
model <- keras_model_sequential()
model %>%
layer_dense(units = 256, activation = "relu", input_shape = c(2352))%>%
layer_dense(units = 128, activation = "relu")%>%
layer_dense(units = 2, activation = "softmax")
summary(model)
model%>%
compile(loss = "binary_crossentropy",
optimizer = optimizer_rmsprop(),
metrics= c("accuracy"))
history <- model%>%
fit(trainx,
trainLabels,
epochs = 20,
batch_size = 32,
validation_split = 0.2)
model %>% evaluate(trainx, trainLabels)
pred <- model %>%
predict_classes(trainx)
table(Predicted = pred, Actual = trainy)
prob <- model %>%
predict_proba(trainx)
options(scipen = 99999)
cbind(prob, Predicted = pred, Actual = trainy)
model %>%
evaluate(testx, testlabels)
pred <- model%>% predict_classes(testx)
table(Predicted = pred, Actual = testy)
mypic[[2]]
knitr::opts_chunk$set(echo = TRUE)
library(EBImage)
library(keras)
pics <- c("p1.JPEG", "p2.JPEG","p3.JPEG", "p4.JPEG", "p5.JPEG", "p6.JPEG","c1.JPEG", "c2.JPEG", "c3.JPEG", "c4.JPEG", "c5.JPEG", "c6.JPEG")
mypic <- list()
for(i in 1:12){
mypic[[i]] <- readImage(pics[i])
}
for(i in 1:12){
mypic[[i]] <- resize(mypic[[i]], 28,28)
}
for(i in 1:12){
mypic[[i]] <- array_reshape(mypic[[i]], c(28,28,3))
}
trainx <- NULL
for(i in 1:5){
trainx<- rbind(trainx, mypic[[i]])
}
for(i in 7:12){
trainx <- rbind(trainx, mypic[[i]])
}
testx <- rbind(mypic[[6]], mypic[[12]])
trainy <- c(0,0,0,0,0,1,1,1,1,1)
testy <- c(0,1)
trainLabels <- to_categorical(trainy)
testlabels <- to_categorical(testy)
model <- keras_model_sequential()
model %>%
layer_dense(units = 256, activation = "relu", input_shape = c(2352))%>%
layer_dense(units = 128, activation = "relu")%>%
layer_dense(units = 2, activation = "softmax")
summary(model)
model%>%
compile(loss = "binary_crossentropy",
optimizer = optimizer_rmsprop(),
metrics= c("accuracy"))
history <- model%>%
fit(trainx,
trainLabels,
epochs = 20,
batch_size = 32,
validation_split = 0.2)
testx <- rbind(mypic[[6]], mypic[[12]])
trainx <- NULL
for(i in 1:5){
trainx<- rbind(trainx, mypic[[i]])
}
for(i in 7:11){
trainx <- rbind(trainx, mypic[[i]])
}
knitr::opts_chunk$set(echo = TRUE)
library(EBImage)
library(keras)
pics <- c("p1.JPEG", "p2.JPEG","p3.JPEG", "p4.JPEG", "p5.JPEG", "p6.JPEG","c1.JPEG", "c2.JPEG", "c3.JPEG", "c4.JPEG", "c5.JPEG", "c6.JPEG")
mypic <- list()
for(i in 1:12){
mypic[[i]] <- readImage(pics[i])
}
for(i in 1:12){
mypic[[i]] <- resize(mypic[[i]], 28,28)
}
for(i in 1:12){
mypic[[i]] <- array_reshape(mypic[[i]], c(28,28,3))
}
trainx <- NULL
for(i in 1:5){
trainx<- rbind(trainx, mypic[[i]])
}
for(i in 7:11){
trainx <- rbind(trainx, mypic[[i]])
}
testx <- rbind(mypic[[6]], mypic[[12]])
trainy <- c(0,0,0,0,0,1,1,1,1,1)
testy <- c(0,1)
trainLabels <- to_categorical(trainy)
testlabels <- to_categorical(testy)
model <- keras_model_sequential()
model %>%
layer_dense(units = 256, activation = "relu", input_shape = c(2352))%>%
layer_dense(units = 128, activation = "relu")%>%
layer_dense(units = 2, activation = "softmax")
summary(model)
model%>%
compile(loss = "binary_crossentropy",
optimizer = optimizer_rmsprop(),
metrics= c("accuracy"))
history <- model%>%
fit(trainx,
trainLabels,
epochs = 20,
batch_size = 32,
validation_split = 0.2)
model %>% evaluate(trainx, trainLabels)
pred <- model %>%
predict_classes(trainx)
table(Predicted = pred, Actual = trainy)
knitr::opts_chunk$set(echo = TRUE)
library(EBImage)
library(keras)
pics <- c("p1.JPEG", "p2.JPEG","p3.JPEG", "p4.JPEG", "p5.JPEG", "p6.JPEG","c1.JPEG", "c2.JPEG", "c3.JPEG", "c4.JPEG", "c5.JPEG", "c6.JPEG")
mypic <- list()
for(i in 1:12){
mypic[[i]] <- readImage(pics[i])
}
for(i in 1:12){
mypic[[i]] <- resize(mypic[[i]], 28,28)
}
for(i in 1:12){
mypic[[i]] <- array_reshape(mypic[[i]], c(28,28,3))
}
trainx <- NULL
for(i in 1:5){
trainx<- rbind(trainx, mypic[[i]])
}
for(i in 7:11){
trainx <- rbind(trainx, mypic[[i]])
}
testx <- rbind(mypic[[6]], mypic[[12]])
trainy <- c(0,0,0,0,0,1,1,1,1,1)
testy <- c(0,1)
trainLabels <- to_categorical(trainy)
testlabels <- to_categorical(testy)
model <- keras_model_sequential()
model %>%
layer_dense(units = 256, activation = "relu", input_shape = c(2352))%>%
layer_dense(units = 128, activation = "relu")%>%
layer_dense(units = 2, activation = "softmax")
summary(model)
model%>%
compile(loss = "binary_crossentropy",
optimizer = optimizer_rmsprop(),
metrics= c("accuracy"))
history <- model%>%
fit(trainx,
trainLabels,
epochs = 20,
batch_size = 32,
validation_split = 0.2)
model %>% evaluate(trainx, trainLabels)
pred <- model %>%
predict_classes(trainx)
table(Predicted = pred, Actual = trainy)
pred <- model %>%
predict_classes(trainx)
table(Predicted = pred, Actual = trainy)
knitr::opts_chunk$set(echo = TRUE)
library(EBImage)
library(keras)
pics <- c("p1.JPEG", "p2.JPEG","p3.JPEG", "p4.JPEG", "p5.JPEG", "p6.JPEG","c1.JPEG", "c2.JPEG", "c3.JPEG", "c4.JPEG", "c5.JPEG", "c6.JPEG")
mypic <- list()
for(i in 1:12){
mypic[[i]] <- readImage(pics[i])
}
for(i in 1:12){
mypic[[i]] <- resize(mypic[[i]], 28,28)
}
for(i in 1:12){
mypic[[i]] <- array_reshape(mypic[[i]], c(28,28,3))
}
trainx <- NULL
for(i in 1:5){
trainx<- rbind(trainx, mypic[[i]])
}
for(i in 7:11){
trainx <- rbind(trainx, mypic[[i]])
}
testx <- rbind(mypic[[6]], mypic[[12]])
trainy <- c(0,0,0,0,0,1,1,1,1,1)
testy <- c(0,1)
trainLabels <- to_categorical(trainy)
testlabels <- to_categorical(testy)
model <- keras_model_sequential()
model %>%
layer_dense(units = 256, activation = "relu", input_shape = c(2352))%>%
layer_dense(units = 128, activation = "relu")%>%
layer_dense(units = 2, activation = "softmax")
summary(model)
model%>%
compile(loss = "binary_crossentropy",
optimizer = optimizer_rmsprop(),
metrics= c("accuracy"))
history <- model%>%
fit(trainx,
trainLabels,
epochs = 30,
batch_size = 32,
validation_split = 0.2)
model %>% evaluate(trainx, trainLabels)
pred <- model %>%
predict_classes(trainx)
table(Predicted = pred, Actual = trainy)
pred <- model %>%
predict_classes(trainx)
table(Predicted = pred, Actual = trainy)
prob <- model %>%
predict_proba(trainx)
options(scipen = 99999)
cbind(prob, Predicted = pred, Actual = trainy)
model %>%
evaluate(testx, testlabels)
pred <- model%>% predict_classes(testx)
table(Predicted = pred, Actual = testy)
display(mypic[[3]])
display(mypic[[2]])
display(mypic[[4]])
hist(mypic[[3]])
plot(mypic[[3]])
hist(mypic[[4]])
plot(mypic[[4]])
print(mypic[[4]])
hist(mypic[[12]])
pics <- c("p1.JPEG", "p2.JPEG","p3.JPEG", "p4.JPEG", "p5.JPEG", "p6.JPEG","c1.JPEG", "c2.JPEG", "c3.JPEG", "c4.JPEG", "c5.JPEG", "c6.JPEG")
library(EBImage)
library(keras)
pics <- c("p1.JPEG", "p2.JPEG","p3.JPEG", "p4.JPEG", "p5.JPEG", "p6.JPEG","c1.JPEG", "c2.JPEG", "c3.JPEG", "c4.JPEG", "c5.JPEG", "c6.JPEG")
mypic <- list()
for(i in 1:12){
mypic[[i]] <- readImage(pics[i])
}
hist(mypic[[12]])
hist(mypic[[6]])
print(mypic[[6]])
display(mypic[[6]])
for(i in 1:12){
mypic[[i]] <- resize(mypic[[i]], 28,28)
}
for(i in 1:12){
mypic[[i]] <- array_reshape(mypic[[i]], c(28,28,3))
}
str(mypic)
trainx <- NULL
for(i in 1:5){
trainx<- rbind(trainx, mypic[[i]])
}
for(i in 7:11){
trainx <- rbind(trainx, mypic[[i]])
}
str(trainx)
trainy <- c(0,0,0,0,0,1,1,1,1,1)
testy <- c(0,1)
trainLabels <- to_categorical(trainy)
testlabels <- to_categorical(testy)
model <- keras_model_sequential()
model %>%
layer_dense(units = 256, activation = "relu", input_shape = c(2352))%>%
layer_dense(units = 128, activation = "relu")%>%
layer_dense(units = 2, activation = "softmax")
summary(model)
model%>%
compile(loss = "binary_crossentropy",
optimizer = optimizer_rmsprop(),
metrics= c("accuracy"))
history <- model%>%
fit(trainx,
trainLabels,
epochs = 30,
batch_size = 32,
validation_split = 0.2)
model %>%
evaluate(testx, testlabels)
trainy <- c(0,0,0,0,0,1,1,1,1,1)
testy <- c(0,1)
testx <- rbind(mypic[[6]], mypic[[12]])
model %>%
evaluate(testx, testlabels)
pred <- model%>% predict_classes(testx)
table(Predicted = pred, Actual = testy)
setwd("C:/Users/cshockley/Desktop/WEBSITE_BLOG")
library(blogdown)
serve_site()
serve_site()
serve_site()
serve_site()
knitr::opts_chunk$set(echo = TRUE)
plot(model)
serve_site()
serve_site()
serve_site()
serve_site()
