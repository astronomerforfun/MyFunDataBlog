model
plot(model)
str(mtcars)
?mtcars
rows <- sample(nrow(mtcars), nrow(mtcars) * .75, replace = F)
train <- mtcars[rows,]
test <- mtcars[-rows,]
model <- train(mpg ~ .,
data = train,
method = "lm",
trControl = trainControl(
method = "cv", number = 5,
repeats = 5, verboseIter = TRUE
)
)
model
rows <- sample(nrow(mtcars), nrow(mtcars) * .75, replace = F)
train <- mtcars[rows,]
test <- mtcars[-rows,]
model <- train(mpg ~ .,
data = mtcars,
method = "lm",
trControl = trainControl(
method = "cv", number = 5,
repeats = 5, verboseIter = TRUE
)
)
model
model <- train(mpg ~ .,
data = mtcars,
method = "lm",
trControl = trainControl(
method = "cv", number = 5,
repeats = 5, verboseIter = FALSE
)
)
model
prediction <- predict(model, mtcars)
prediction <- predict(model, mtcars)
confusionMatrix(prediction, mtcars$mpg)
prediction <- predict(model, mtcars)
confusionMatrix(prediction, mtcars)
prediction <- predict(model, mtcars)
prediction
confusionMatrix(prediction, mtcars$mpg)
plot(model)
pred <- predict(model, mtcars)
confusionMatrix(pred, mtcars$mpg)
pred
#calculate RMSE
rmse <- pred - mtcars$mpg
mean(rmse^2)
pred <- predict(model, mtcars)
#calculate RMSE
rmse <- pred - mtcars$mpg
sqrt(mean(rmse^2))
hist(mtcars)
hist(mtcars$mpg)
tuneGrid <- data.frame(mtry = c(2,3,5,6,7,8,9),
splitrule = "variance", min.node.size = 5)
model <- train(binary ~ .,
data = mtcars,
method = "glm",
tuneLength = 5,
trControl = trainControl(method = "cv",
number =2,
verboseIter = TRUE))
mtcars$binary <- ifelse(mtcars$mpg > 20, "Not Good", "Good")
tuneGrid <- data.frame(mtry = c(2,3,5,6,7,8,9),
splitrule = "variance", min.node.size = 5)
model <- train(binary ~ .,
data = mtcars,
method = "glm",
tuneLength = 5,
trControl = trainControl(method = "cv",
number =2,
verboseIter = TRUE))
model
plot(model)
model
sonar
Sonar
library(datsets)
library(datsets)
install.packages("mlbench")
library(caret)
library(ggplot2)
library(ranger)
library(devtools)
library(modelplotr)
library(mlbench)
?Sonar
str(Sonar)
str(Sonar)
str(sonar)
Sonar
library(caret)
library(ggplot2)
library(ranger)
library(devtools)
library(modelplotr)
library(mlbench)
data("Sonar")
sonar <- data("Sonar")
str(sonar)
sonar <- data(Sonar)
str(sonar)
View(sonar)
library(caret)
library(ggplot2)
library(ranger)
library(devtools)
library(modelplotr)
library(mlbench)
Sonar
sonar <- Sonar
str(sonar)
sonar <- Sonar
rows <- sample(nrow(sonar), nrow(sonar) * .6, replace = FALSE)
train <- sonar[rows,]
test <- sonar[-rows,]
str(sonar)
modelsonar <- train(Class ~ .,
data = train,
method = "glm",
trControl = trainControl(method = "cv",
number = 5, repeats = 5,verboseIter = F))
modelsonar <- train(Class ~ .,
data = train,
method = "glm",
trControl = trainControl(method = "cv",
number = 5,verboseIter = F))
myControl <- trainControl(
method = "cv",
number = 10,
summaryFunction = twoClassSummary,
classProbs = TRUE, # IMPORTANT!
verboseIter = TRUE
)
modelsonar <- train(Class ~ .,
data = train,
method = "glm",
trControl = myControl)
modelsonar
myControl <- trainControl(
method = "cv",
number = 10,
summaryFunction = twoClassSummary,
classProbs = TRUE, # IMPORTANT!
verboseIter = TRUE
)
modelsonar <- train(Class ~ .,
data = sonar,
method = "glm",
trControl = myControl)
modelsonar
myControl <- trainControl(
method = "cv",
number = 10,
summaryFunction = twoClassSummary,
classProbs = TRUE, # IMPORTANT!
verboseIter = TRUE
)
modelsonar <- train(Class ~ .,
data = sonar,
method = "glm",
trControl = myControl)
modelsonar
pred2 <- predict(modelsonar, test)
confusionMatrix(pred2, test$Class)
myControl <- trainControl(
method = "cv",
number = 10,
summaryFunction = twoClassSummary,
classProbs = TRUE, # IMPORTANT!
verboseIter = TRUE
)
modelsonar <- train(Class ~ .,
data = train,
method = "glm",
trControl = myControl)
modelsonar
pred2 <- predict(modelsonar, test)
confusionMatrix(pred2, test$Class)
sonar <- Sonar
rows <- sample(nrow(sonar), nrow(sonar) * .8, replace = FALSE)
train <- sonar[rows,]
test <- sonar[-rows,]
myControl <- trainControl(
method = "cv",
number = 10,
summaryFunction = twoClassSummary,
classProbs = TRUE, # IMPORTANT!
verboseIter = TRUE
)
modelsonar <- train(Class ~ .,
data = train,
method = "glm",
trControl = myControl)
modelsonar
pred2 <- predict(modelsonar, test)
confusionMatrix(pred2, test$Class)
colAUC(p, test[["Class"]], plotROC = TRUE)
myControl <- trainControl(
method = "cv",
number = 10,
summaryFunction = twoClassSummary,
classProbs = TRUE, # IMPORTANT!
verboseIter = TRUE
)
modelsonar <- train(Class ~ .,
data = train,
method = "glm",
trControl = myControl)
modelsonar
colAUC(pred2, test[["Class"]], plotROC = TRUE)
myControl <- trainControl(
method = "cv",
number = 10,
summaryFunction = twoClassSummary,
classProbs = TRUE, # IMPORTANT!
verboseIter = TRUE
)
modelsonar <- train(Class ~ .,
data = train,
method = "glm",
trControl = myControl)
modelsonar
pred2 <- predict(modelsonar, test)
confusionMatrix(pred2, test$Class)
colAUC(pred2, test[["Class"]], plotROC = TRUE)
colAUC(pred2, test$Class, plotROC = TRUE)
colAUC(pred2, test$Class, plotROC = TRUE)
library(caret)
library(ggplot2)
library(ranger)
library(devtools)
library(modelplotr)
library(mlbench)
library(caTools)
colAUC(pred2, test$Class, plotROC = TRUE)
sonar <- Sonar
rows <- sample(nrow(sonar), nrow(sonar) * .8, replace = FALSE)
train <- sonar[rows,]
test <- sonar[-rows,]
pred2 <- predict(modelsonar, test, type = "response")
pred2 <- predict(modelsonar, test, type = "prob")
pred2 <- predict(modelsonar, test, type = "prob")
colAUC(pred2, test$Class, plotROC = TRUE)
pred2 <- predict(modelsonar, test, type = "response")
pred2 <- predict(modelsonar, test, type = "response")
pred2 <- predict(modelsonar, test)
colAUC(pred2, test$Class, plotROC = TRUE)
pred2 <- predict(modelsonar, test, response = "prob")
colAUC(pred2, test$Class, plotROC = TRUE)
pred2 <- predict(modelsonar, test, type = "prob")
modelsonar
sonar <- Sonar
rows <- sample(nrow(sonar), nrow(sonar) * .8, replace = FALSE)
train <- sonar[rows,]
test <- sonar[-rows,]
myControl <- trainControl(
method = "cv",
number = 10,
summaryFunction = twoClassSummary,
classProbs = TRUE, # IMPORTANT!
verboseIter = TRUE
)
modelsonar <- train(Class ~ .,
data = train,
method = "glm",
trControl = myControl)
modelsonar
pred2 <- predict(modelsonar, test, type = "prob")
colAUC(pred2, test$Class, plotROC = TRUE)
confusionMatrix(pred2, test$Class)
confusionMatrix(pred2, test[["Class"]])
table(pred2, test$Class)
sonar <- Sonar
rows <- sample(nrow(sonar), nrow(sonar) * .8, replace = FALSE)
train <- sonar[rows,]
test <- sonar[-rows,]
nrow(Sonar)
Sonar
rows <- sample(nrow(Sonar), nrow(Sonar) * .7, replace = FALSE)
train <- Sonar[rows,]
test <- Sonar[-rows,]
library(caret)
library(ggplot2)
library(ranger)
library(devtools)
library(modelplotr)
library(mlbench)
library(caTools)
df <- Sonar
knitr::opts_chunk$set(echo = TRUE)
rows <- sample(nrow(Sonar), nrow(Sonar) * .7, replace = FALSE)
train <- Sonar[rows,]
test <- Sonar[-rows,]
test
rows <- sample(nrow(Sonar), nrow(Sonar) * .7, replace = FALSE)
train <- Sonar[rows,]
test <- Sonar[-rows,]
Sonar <- data(Sonar)
rows <- sample(nrow(Sonar), nrow(Sonar) * .7, replace = FALSE)
data(Sonar)
summary(Sonar)
df <- data(Sonar)
rows <- sample(nrow(df), nrow(df) * .7, replace = FALSE)
df
df <- Sonar
df <- Sonar
rows <- sample(nrow(df), nrow(df) * .7, replace = FALSE)
train <- df[rows,]
test <- df[-rows,]
class(Sonar)
knitr::opts_chunk$set(echo = TRUE)
library(caret)
library(ggplot2)
library(ranger)
library(devtools)
library(modelplotr)
library(mlbench)
library(caTools)
str(mtcars)
model <- train(mpg ~ .,
data = mtcars,
method = "lm",
trControl = trainControl(
method = "cv", number = 5,
repeats = 5, verboseIter = FALSE
)
)
model
pred <- predict(model, mtcars)
#calculate RMSE
rmse <- pred - mtcars$mpg
sqrt(mean(rmse^2))
df <- Sonar
df <- Sonar
library(caret)
library(ggplot2)
library(ranger)
library(devtools)
library(modelplotr)
library(mlbench)
library(caTools)
df <- Sonar
df <- data(Sonar)
rows <- sample(nrow(df), nrow(df) * .7, replace = FALSE)
Sonar
rows <- sample(nrow(Sonar), nrow(Sonar) * .8, replace = FALSE)
train <- Sonar[rows,]
test <- Sonar[-rows,]
unlink('C:/Users/cshockley/Desktop/caret2_cache', recursive = TRUE)
df <- as.data.frame(data(Sonar))
rows <- sample(nrow(Sonar), nrow(Sonar) * .8, replace = FALSE)
train <- Sonar[rows,]
test <- Sonar[-rows,]
df
df <- data(Sonar)
df
Boston
library(caret)
library(ggplot2)
library(ranger)
library(devtools)
library(modelplotr)
library(mlbench)
library(caTools)
library(MASS)
Boston
# rows <- sample(nrow(Sonar), nrow(Sonar) * .8, replace = FALSE)
# train <- Sonar[rows,]
# test <- Sonar[-rows,]
knitr::opts_chunk$set(echo = TRUE)
library(tfestimators)
install_tensorflow()
library(tfestimators)
install_tensorflow()
library(tfestimators)
install_tensorflow()
setwd("C:/Users/cshockley/Desktop/RandomForest")
knitr::opts_chunk$set(echo = TRUE)
data <- read.csv("CTG.csv", header = T)
str(data)
table(data$NSP)
set.seed(123)
rows <- sample(nrow(data), nrow(data) *. 7, replace = F)
set.seed(123)
rows <- sample(nrow(data), nrow(data) *.7, replace = F)
set.seed(123)
rows <- sample(nrow(data), nrow(data) *.7, replace = F)
train <- data[rows,]
test <- data[-rows,]
knitr::opts_chunk$set(echo = TRUE)
library(randomForest)
rf <- randomForest(NSP ~ ., data = train)
rf
print(rf)
summary(rf)
print(rf)
knitr::opts_chunk$set(echo = TRUE)
library(randomForest)
rf <- randomForest(NSP ~ ., data = train)
print(rf)
rf <- randomForest(as.factor(NSP) ~ ., data = train)
print(rf)
data <- read.csv("CTG.csv", header = T)
str(data)
data$NSP <- as.factor(data$NSP)
data$NSP <- as.factor(data$NSP)
data <- read.csv("CTG.csv", header = T)
str(data)
rf
rf$importance
library(caret)
prediction <- predict(rf, test)
library(caret)
prediction <- predict(rf, test)
confusionMatrix(prediction, test$NSP)
library(caret)
prediction <- predict(rf, test)
confusionMatrix(prediction, as.factor(test$NSP))
plot(rf)
t <- tuneRF(train[,-22], train[,-22],
stepFactor = 0.5,
plot = TRUE,
ntreeTry = 300,
trace = TRUE,
improve = .05)
names(train)
names(train)
t <- tuneRF(train[,-22], train[,-22],
stepFactor = 0.5,
plot = TRUE,
ntreeTry = 300,
trace = TRUE,
improve = .05)
t
t <- tuneRF(train[,-22], train[,-22],
stepFactor = 0.5,
plot = TRUE,
ntreeTry = 300,
trace = TRUE,
improve = .05)
t <- tuneRF(train[,-22], train[,22],
stepFactor = 0.5,
plot = TRUE,
ntreeTry = 300,
trace = TRUE,
improve = .05)
rf <- randomForest(as.factor(NSP) ~ .,
data = train,
ntree = 300,
mtry = 7,
importance = TRUE,
proximity = TRUE)
rf
set.seed(123)
rf2 <- randomForest(as.factor(NSP) ~ .,
data = train,
ntree = 300,
mtry = 7,
importance = TRUE,
proximity = TRUE)
rf
set.seed(123)
rf2 <- randomForest(as.factor(NSP) ~ .,
data = train,
ntree = 300,
mtry = 7,
importance = TRUE,
proximity = TRUE)
rf2
set.seed(123)
rf <- randomForest(as.factor(NSP) ~ ., data = train)
rf
set.seed(123)
rf2 <- randomForest(as.factor(NSP) ~ .,
data = train,
ntree = 300,
mtry = 7,
importance = TRUE,
proximity = TRUE)
rf2
prediction2 <- predict(rf2, test)
prediction2
prediction2 <- predict(rf2, test)
confusionMatrix(prediction2, as.factor(test$NSP))
library(caret)
prediction <- predict(rf, test)
confusionMatrix(prediction, as.factor(test$NSP))
hist(treesize(rf2, main = "No. of Nodes for the Trees", col = green))
hist(treesize(rf2, main = "No. of Nodes for the Trees", col = "blue"))
hist(treesize(rf2), main = "No. of Nodes for the Trees", col = "blue")
varImpPlot(rf2)
varImpPlot(rf2,
sort = T, n.var = 20,
main = "Top 10 - Variable Importance")
varUsed(rf2)
importance(rf2)
partialPlot(rf2, test, ASTV, "1")
partialPlot(rf2, test, ASTV, "3")
partialPlot(rf2, test, ASTV, "2")
getTree(rf2, labelVar = TRUE)
setwd("C:/Users/cshockley/Desktop/WEBSITE_BLOG")
library(blogdown)
serve_site()
serve_site()
>
<
