method = "ranger",
tuneLength = 500,
trControl = trainControl(method = "cv", number = 10, verboseIter = FALSE))
plot(model_RF)
print(model_RF)
plot(model_RF)
pred2 <- predict(model_RF, test)
error2 <- pred2 - test$cty
sqrt(mean(error2^2))
tuneGrid <- data.frame(
mtry = c(2,5,10,20,30,40),
splitrule = "variance",
min.node.size = 5
)
model_RF <- train(cty ~ .,
train,
method = "ranger",
tuneLength = 30,
trControl = trainControl(method = "cv", number = 10, verboseIter = FALSE))
plot(model_RF)
pred2 <- predict(model_RF, test)
error2 <- pred2 - test$cty
sqrt(mean(error2^2))
pred2 <- predict(model_RF, test)
error2 <- pred2 - test$cty
sqrt(mean(error2^2))
model_RF
summary(model_RF)
model_RF
rows <- sample(nrow(mpg), nrow(mpg) * .75, replace = F) #sample rows
train <- mpg[rows,] #subset sampled rows
test <- mpg[-rows,] #continue subset
#Run model.  lm function with 20 cross validations.
model_lm <- train(cty ~ .,
train,
method = "lm",
trControl = trainControl(method = "cv", number = 20, verboseIter = FALSE))
print(model_lm)
print(model_lm)
pred <- predict(model_lm, test)
error <- pred - test$cty
RMSE <- sqrt(mean(error^2))
print(RMSE)
pred2 <- predict(model_RF, test)
error2 <- pred2 - test$cty
sqrt(mean(error2^2))
model_RF
pred2 <- predict(model_RF, test)
pred2 <- predict(model_RF, test)
error2 <- pred2 - test$cty
sqrt(mean(error2^2))
#Run model.  'lm' function with 20 cross validations.
model_lm <- train(cty ~ .,
train,
method = "lm",
trControl = trainControl(method = "cv", number = 20, verboseIter = FALSE))
print(model_lm)
str(mpg)
mpg <- mutate_if(is.character, as.factor)
mpg <- mpg%>%
mutate_if(is.character, as.factor)
rows <- sample(nrow(mpg), nrow(mpg) * .75, replace = F) #sample rows
train <- mpg[rows,] #subset sampled rows
test <- mpg[-rows,] #continue subset
train
str(train)
str(mpg)
#Run model.  'lm' function with 20 cross validations.
model_lm <- train(cty ~ .,
train,
method = "lm",
trControl = trainControl(method = "cv", number = 20, verboseIter = FALSE))
print(model_lm)
print(model_lm)
pred <- predict(model_lm, test)
error <- pred - test$cty
RMSE <- sqrt(mean(error^2))
print(RMSE)
set.seed(123)
# tuneGrid <- data.frame(
#   mtry = c(2,5,10,20,30,40),  #######For choosing the appropriate mtry
#   splitrule = "variance",
#   min.node.size = 5
# )
model_RF <- train(cty ~ .,
train,
method = "ranger",
tuneLength = 30,
trControl = trainControl(method = "cv", number = 10, verboseIter = FALSE))
plot(model_RF)
pred2 <- predict(model_RF, test)
error2 <- pred2 - test$cty
sqrt(mean(error2^2))
set.seed(123)
# tuneGrid <- data.frame(
#   mtry = c(2,5,10,20,30,40),  #######For choosing the appropriate mtry
#   splitrule = "variance",
#   min.node.size = 5
# )
model_RF <- train(cty ~ .,
train,
method = "ranger",
tuneLength = 30,
trControl = trainControl(method = "cv", number = 10, verboseIter = FALSE))
plot(model_RF)
pred2 <- predict(model_RF, test)
error2 <- pred2 - test$cty
sqrt(mean(error2^2))
sqrt(mean(error2^2))
plot(model_RF)
set.seed(123)
# tuneGrid <- data.frame(
#   mtry = c(2,5,10,20,30,40),  #######For choosing the appropriate mtry
#   splitrule = "variance",
#   min.node.size = 5
# )
model_RF <- train(cty ~ .,
train,
method = "ranger",
tuneLength = 20,
trControl = trainControl(method = "cv", number = 15, verboseIter = FALSE))
plot(model_RF)
model_RF
summary(model_RF)
model_RF
pred2 <- predict(model_RF, test)
error2 <- pred2 - test$cty
sqrt(mean(error2^2))
knitr::opts_chunk$set(echo = TRUE)
library(caret)
library(caTools)
library(tidyverse)
setwd("~/Desktop/ROC")
knitr::opts_chunk$set(echo = TRUE)
library(caret)
library(caTools)
library(tidyverse)
mpg$binary <- ifelse(mpg$hwy > 25, "Not Good", "Good")
mpg
rows <- sample(nrow(mpg), nrow(mpg) * .7, replace = F)
mpg$binary <- ifelse(mpg$hwy > 25, "Not Good", "Good") #create a binary variable (if mpg hwy is > 25, etc.)
rows <- sample(nrow(mpg), nrow(mpg) * .7, replace = F) #sample rows for training and test splits
train <- mpg[rows,] #subset on random sampling
test <- mpg[-rows,] #subset on random sampling
model <- glm(binary ~ ., train, family = "binomial")
model <- glm(as.factor(binary) ~ ., train, family = "binomial")
model
plot(model)
p <- predict(model, test)
model <- glm(binary~ ., train, family = "binomial")
mpg$binary <- ifelse(mpg$hwy > 25, "1", "0") #create a binary variable (if mpg hwy is > 25, etc.)
mpg$binary <- ifelse(mpg$hwy > 25, "1", "0") #create a binary variable (if mpg hwy is > 25, etc.)
rows <- sample(nrow(mpg), nrow(mpg) * .7, replace = F) #sample rows for training and test splits
train <- mpg[rows,] #subset on random sampling
test <- mpg[-rows,] #subset on random sampling
model <- glm(binary~ ., train, family = "binomial")
mpg$binary <- ifelse(mpg$hwy > 25, "1", "0") #create a binary variable (if mpg hwy is > 25, etc.)
rows <- sample(nrow(mpg), nrow(mpg) * .7, replace = F) #sample rows for training and test splits
train <- mpg[rows,] #subset on random sampling
test <- mpg[-rows,] #subset on random sampling
model <- glm(binary~ ., train, family = "binomial")
model <- glm(as.factor(binary)~ ., train, family = "binomial")
p <- predict(model, test)
p <- predict(model, test)
str(mpg)
mpg <- mpg%>%
mutate_if(is.character, as.factor)
mpg$binary <- ifelse(mpg$hwy > 25, "1", "0") #create a binary variable (if mpg hwy is > 25, etc.)
rows <- sample(nrow(mpg), nrow(mpg) * .7, replace = F) #sample rows for training and test splits
train <- mpg[rows,] #subset on random sampling
test <- mpg[-rows,] #subset on random sampling
model <- glm(as.factor(binary)~ ., train, family = "binomial")
p <- predict(model, test)
hist(diamonds$price)
str(diamonds)
hist(diamonds$price)
diamonds$binary <- ifelse(diamonds$price > 5500, "High", "Ok")
rows <- sample(nrow(diamonds), nrow(diamonds) * .7, replace = F)
train <- diamonds[rows,]
test <- diamonds[-rows,]
model <- glm(binary ~ ., train, family = "binomial")
model <- glm(as.factor(binary) ~ ., train, family = "binomial")
pred <- predict(model, test)
confusionMatrix(pred, test)
pred <- predict(model, test, type = "binary")
pred <- predict(model, test, type = "probs")
pred <- predict(model, test, type = "prob")
pred <- predict(model, test, type = "response")
pred <- predict(model, test)
p <- predict(model, test)
p <- predict(model, test)
model <- glm(as.factor(binary) ~ ., train, family = "binomial")
p <- predict(model, test)
confusionMatrix(p, test)
confusionMatrix(p, test$binary)
test <- ifelse(p > .5, "High", "Ok")
diamonds$binary <- ifelse(diamonds$price > 5500, "High", "Ok")
rows <- sample(nrow(diamonds), nrow(diamonds) * .7, replace = F)
train <- diamonds[rows,]
test <- diamonds[-rows,]
model <- glm(as.factor(binary) ~ ., train, family = "binomial")
p <- predict(model, test)
test <- ifelse(p > .5, "High", "Ok")
str(test)
str(test)
test
diamonds$binary <- ifelse(diamonds$price > 5500, "High", "Ok")
rows <- sample(nrow(diamonds), nrow(diamonds) * .7, replace = F)
train <- diamonds[rows,]
test <- diamonds[-rows,]
model <- glm(as.factor(binary) ~ ., train, family = "binomial")
test
diamonds$binary <- ifelse(diamonds$price > 5500, "High", "Ok")
rows <- sample(nrow(diamonds), nrow(diamonds) * .7, replace = F)
train <- diamonds[rows,]
test <- diamonds[-rows,]
model <- glm(as.factor(binary) ~ ., train, family = "binomial")
p <- predict(model, test)
test <- ifelse(p > .5, "High", "Ok")
pclass <- factor(test, levels = levels(test$binary))
pclass <- factor(test, levels = levels(test[["binary"]]))
pclass <- factor(test, levels = levels(test$binary))
pclass <- factor(test, levels = levels(test))
confusionMatrix(p, test$binary)
table(p, test$binary)
p <- predict(model, test)
diamonds$binary <- ifelse(diamonds$price > 5500, "High", "Ok")
rows <- sample(nrow(diamonds), nrow(diamonds) * .7, replace = F)
train <- diamonds[rows,]
test <- diamonds[-rows,]
model <- glm(as.factor(binary) ~ ., train, family = "binomial")
p <- predict(model, test)
table(p, test$binary)
p <- predict(model, test, type = "prob")
?predict
library(stats)
set.seed(123)
diamonds$binary <- ifelse(diamonds$price > 5500, "High", "Ok")
rows <- sample(nrow(diamonds), nrow(diamonds) * .7, replace = F)
train <- diamonds[rows,]
test <- diamonds[-rows,]
model <- glm(as.factor(binary) ~ ., train, family = "binomial")
p <- predict(model, test, type = "response")
p
high_or_low <- ifelse(p > .5, "High", "Ok")
class <- factor(high_or_low, levels = levels(test$binary))
confusionMatrix(class, test$binary)
class <- factor(high_or_low, levels = levels(test$binary))
confusionMatrix(class, test$binary)
confusionMatrix(class, as.factor(test$binary))
class <- as.factor(high_or_low, levels = levels(test$binary))
p <- predict(model, test, type = "response")
high_or_low <- ifelse(p > .5, "High", "Ok")
high_or_low
model <- glm(binary ~ ., train, family = "binomial")
model
model <- glm(as.factor(binary) ~ ., train, family = "binomial")
set.seed(123)
diamonds$binary <- ifelse(diamonds$price > 5500, "High", "Ok")
rows <- sample(nrow(diamonds), nrow(diamonds) * .7, replace = F)
train <- diamonds[rows,]
test <- diamonds[-rows,]
model <- glm(as.factor(binary) ~ ., train, family = "binomial")
model
model$coefficients
set.seed(123)
diamonds$binary <- ifelse(diamonds$price > 5500, "High", "Ok")
rows <- sample(nrow(diamonds), nrow(diamonds) * .7, replace = F)
train <- diamonds[rows,]
test <- diamonds[-rows,]
model <- glm(as.factor(binary) ~ ., train, family = "binomial")
p <- predict(model, test, type = "response")
high_or_low <- ifelse(p > .5, "High", "Ok")
high_or_low
class <- factor(high_or_low, levels = levels(test$binary))
confusionMatrix(class, as.factor(test$binary))
install.packages("mlbench")
library(mlbench)
str(diamonds)
data("Sonar")
df <- Sonar
glimpse(df)
rows <- sample(nrow(df), nrow(df) * .7, replace = F)
train <- df[rows,]
test <- df[-rows,]
glimpse(test)
model <- glm(Class ~ ., train, family = "binomial")
p <- predict(model, test, type = "response")
M_or_R <- ifelse(p > .5, "M", "R")
class <- factor(M_or_R, levels = levels = test$Class)
class <- factor(M_or_R, levels = levels(test$Class))
confusionMatrix(class, test$Class)
M_or_R <- ifelse(p > .7, "M", "R")
p <- predict(model, test, type = "response")
M_or_R <- ifelse(p > .7, "M", "R")
#convert to factor
class <- factor(M_or_R, levels = levels(test$Class))
confusionMatrix(class, test$Class)
set.seed(123)
rows <- sample(nrow(df), nrow(df) * .7, replace = F)
train <- df[rows,]
test <- df[-rows,]
model <- glm(Class ~ ., train, family = "binomial")
p <- predict(model, test, type = "response")
M_or_R <- ifelse(p > .7, "M", "R")
#convert to factor
class <- factor(M_or_R, levels = levels(test$Class))
confusionMatrix(class, test$Class)
M_or_R <- ifelse(p > .7, "R", "M")
class <- factor(M_or_R, levels = levels(test$Class))
confusionMatrix(class, test$Class)
M_or_R <- ifelse(p > .5, "R", "M")
p <- predict(model, test, type = "response")
M_or_R <- ifelse(p > .5, "R", "M")
#convert to factor
class <- factor(M_or_R, levels = levels(test$Class))
confusionMatrix(class, test$Class)
colAUC(p, test$Class, plotROC = T)
glipse(Sonar)
glimpse(Sonar)
data("Sonar")
df <- Sonar
str(df)
head(df, 4)
head(p)
M_or_R <- ifelse(p > .5, "R", "M")
#convert to factor
class <- factor(M_or_R, levels = levels(test$Class))
confusionMatrix(class, test$Class)
M_or_R <- ifelse(p > .7, "R", "M")
#convert to factor
class <- factor(M_or_R, levels = levels(test$Class))
confusionMatrix(class, test$Class)
M_or_R <- ifelse(p > .7, "M", "R")
#convert to factor
class <- factor(M_or_R, levels = levels(test$Class))
confusionMatrix(class, test$Class)
M_or_R <- ifelse(p > .7, "R", "M")
#convert to factor
class <- factor(M_or_R, levels = levels(test$Class))
confusionMatrix(class, test$Class)
M_or_R <- ifelse(p > .5, "R", "M")
#convert to factor
class <- factor(M_or_R, levels = levels(test$Class))
confusionMatrix(class, test$Class)
M_or_R <- ifelse(p > .7, "R", "M")
#convert to factor
class <- factor(M_or_R, levels = levels(test$Class))
confusionMatrix(class, test$Class)
M_or_R <- ifelse(p > .2, "R", "M")
#convert to factor
class <- factor(M_or_R, levels = levels(test$Class))
confusionMatrix(class, test$Class)
M_or_R2 <- ifelse(p > .2, "R", "M")
#convert to factor
class2 <- factor(M_or_R, levels = levels(test$Class))
confusionMatrix(class2, test$Class)
M_or_R2 <- ifelse(p > .7, "R", "M")
#convert to factor
class2 <- factor(M_or_R2, levels = levels(test$Class))
confusionMatrix(class2, test$Class)
M_or_R <- ifelse(p > .5, "R", "M")
#convert to factor
class <- factor(M_or_R, levels = levels(test$Class))
confusionMatrix(class, test$Class)
M_or_R <- ifelse(p > .5, "M", "R")
#convert to factor
class <- factor(M_or_R, levels = levels(test$Class))
confusionMatrix(class, test$Class)
M_or_R <- ifelse(p > .5, "R", "M")
#convert to factor
class <- factor(M_or_R, levels = levels(test$Class))
confusionMatrix(class, test$Class)
class2 <- factor(M_or_R2, levels = levels(test$Class))
M_or_R2 <- ifelse(p > .2, "R", "M")
class2 <- factor(M_or_R, levels = levels(test$Class))
confusionMatrix(class2, test$Class)
M_or_R2 <- ifelse(p > .2, "R", "M")
#convert to factor
class2 <- factor(M_or_R2, levels = levels(test$Class))
confusionMatrix(class2, test$Class)
M_or_R2 <- ifelse(p > .2, "R", "M")
#convert to factor
class2 <- factor(M_or_R2, levels = levels(test$Class))
confusionMatrix(class2, test$Class)
myControl <- trainControl(
method = "cv",
number = 10,
summaryFunction = twoClassSummary,
classProbs = TRUE, # IMPORTANT!
verboseIter = FALSE
)
model2 <- train(Class ~ ., Sonar, method = "glm",
trControl = myControl)
model2
M_or_R <- ifelse(p > .7, "R", "M")
#convert to factor
class <- factor(M_or_R, levels = levels(test$Class))
confusionMatrix(class, test$Class)
set.seed(123)
rows <- sample(nrow(df), nrow(df) * .7, replace = F)
train <- df[rows,]
test <- df[-rows,]
model <- glm(Class ~ ., train, family = "binomial")
set.seed(123)
rows <- sample(nrow(df), nrow(df) * .7, replace = F)
train <- df[rows,]
test <- df[-rows,]
model <- glm(Class ~ ., train, family = "binomial")
p <- predict(model, test, type = "response")
M_or_R <- ifelse(p > .5, "R", "M")
#convert to factor
class <- factor(M_or_R, levels = levels(test$Class))
confusionMatrix(class, test$Class)
rows <- sample(nrow(df), nrow(df) * .7, replace = F)
train <- df[rows,]
test <- df[-rows,]
model <- glm(Class ~ ., train, family = "binomial")
p <- predict(model, test, type = "response")
M_or_R <- ifelse(p > .5, "R", "M")
#convert to factor
class <- factor(M_or_R, levels = levels(test$Class))
confusionMatrix(class, test$Class)
M_or_R2 <- ifelse(p > .7, "R", "M")
#convert to factor
class2 <- factor(M_or_R2, levels = levels(test$Class))
confusionMatrix(class2, test$Class)
M_or_R <- ifelse(p > .7, "R", "M")
#convert to factor
class <- factor(M_or_R, levels = levels(test$Class))
confusionMatrix(class, test$Class)
M_or_R <- ifelse(p > 0.7, "R", "M")
#convert to factor
class <- factor(M_or_R, levels = levels(test$Class))
confusionMatrix(class, test$Class)
class <- factor(M_or_R, levels = levels(test[["Class"]]))
M_or_R <- ifelse(p > 0.7, "R", "M")
#convert to factor
class <- factor(M_or_R, levels = levels(test[["Class"]]))
confusionMatrix(class, test[$Class]["Class"])
M_or_R <- ifelse(p > 0.7, "R", "M")
#convert to factor
class <- factor(M_or_R, levels = levels(test[["Class"]]))
confusionMatrix(class, test[["Class"]])
set.seed(123)
rows <- sample(nrow(df), nrow(df) * .7, replace = F)
train <- df[rows,]
test <- df[-rows,]
model <- glm(Class ~ ., train, family = "binomial")
p <- predict(model, test, type = "response")
M_or_R <- ifelse(p > 0.7, "R", "M")
#convert to factor
class <- factor(M_or_R, levels = levels(test[["Class"]]))
confusionMatrix(class, test[["Class"]])
M_or_R <- ifelse(p > 0.5, "R", "M")
#convert to factor
class <- factor(M_or_R, levels = levels(test[["Class"]]))
confusionMatrix(class, test[["Class"]])
set.seed(123)
rows <- sample(nrow(df), nrow(df) * .7, replace = F)
data("Sonar")
df <- Sonar
head(df, 4)
set.seed(123)
rows <- sample(nrow(df), nrow(df) * .7, replace = F)
train <- df[rows,]
test <- df[-rows,]
model <- glm(Class ~ ., train, family = "binomial")
p <- predict(model, test, type = "response")
M_or_R <- ifelse(p > 0.5, "R", "M")
#convert to factor
class <- factor(M_or_R, levels = levels(test[["Class"]]))
confusionMatrix(class, test[["Class"]])
rows <- sample(nrow(df), nrow(df) * .7, replace = F)
train <- df[rows,]
test <- df[-rows,]
model <- glm(Class ~ ., train, family = "binomial")
p <- predict(model, test, type = "response")
M_or_R <- ifelse(p > 0.5, "R", "M")
#convert to factor
class <- factor(M_or_R, levels = levels(test[["Class"]]))
confusionMatrix(class, test[["Class"]])
M_or_R <- ifelse(p > 0.8, "R", "M")
#convert to factor
class <- factor(M_or_R, levels = levels(test[["Class"]]))
confusionMatrix(class, test[["Class"]])
class <- factor(M_or_R, levels = levels(test[["Class"]]))
confusionMatrix(class, test[["Class"]])
myControl <- trainControl(
method = "cv",
number = 10,
summaryFunction = twoClassSummary,
classProbs = TRUE, # IMPORTANT!
verboseIter = FALSE
)
model2 <- train(Class ~ ., Sonar, method = "glm",
trControl = myControl)
model2
model2 <- train(Class ~ ., Sonar, method = "glm",
trControl = myControl)
model2
model2 <- train(Class ~ ., Sonar, method = "glm",
trControl = myControl)
model2
model2
prediction <- predict(model, test)
prediction <- predict(model, test, type = "response")
confusionMatrix(prediction, test$Class)
prediction <- predict(model, test)
table(prediction, test$Class)
table(prediction, as.factor(test$Class))
confusionMatrix(prediction, as.factor(test$Class))
